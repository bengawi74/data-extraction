name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Build & Test (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      FORCE_COLOR: "1"
      CLI_BIN: "datax"                    # <- your CLI command
      PACKAGE_NAME: "data_extraction_anwar"  # <- your top-level import

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install project
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel
          if [ -f pyproject.toml ]; then
            python -m pip install -e .[dev] || python -m pip install -e .
          fi
          if [ -f requirements-dev.txt ]; then
            python -m pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install pytest pytest-cov >/dev/null 2>&1 || true
          # optional linters if present
          python -m pip install ruff black >/dev/null 2>&1 || true

      - name: Lint (ruff if available)
        shell: bash
        run: |
          if python - <<'PY'
import importlib,sys; sys.exit(0 if importlib.util.find_spec("ruff") else 1)
PY
          then ruff check .
          else echo "ruff not installed; skipping."
          fi

      - name: Format check (black --check if available)
        shell: bash
        run: |
          if python - <<'PY'
import importlib,sys; sys.exit(0 if importlib.util.find_spec("black") else 1)
PY
          then black --check .
          else echo "black not installed; skipping."
          fi

      - name: Run tests with coverage
        env:
          PYTHONWARNINGS: ignore
        shell: bash
        run: |
          if python - <<'PY'
import importlib,sys; sys.exit(0 if importlib.util.find_spec("pytest") else 1)
PY
          then
            pytest -q \
              --maxfail=1 --disable-warnings \
              --cov="$PACKAGE_NAME" --cov-report=term-missing \
              --cov-report=xml:coverage.xml
          else
            echo "pytest not installed; skipping tests."
          fi

      - name: CLI smoke test
        shell: bash
        run: |
          set -euo pipefail
          # Ensure the editable install put the CLI on PATH
          if ! command -v "$CLI_BIN" >/dev/null 2>&1; then
            echo "CLI '$CLI_BIN' not found on PATH"; exit 1
          fi
          "$CLI_BIN" --version || "$CLI_BIN" -V || true
          "$CLI_BIN" --help    >/dev/null 2>&1 || true
          # If 'datax all' is heavy, comment it out. Keep smoke fast.
          # "$CLI_BIN" all >/dev/null 2>&1 || true

      - name: Upload coverage to Codecov
        if: always() && hashFiles('coverage.xml') != ''
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: unit
          fail_ci_if_error: false

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            .pytest_cache/
            .ruff_cache/
            **/*.log
            **/pytest.xml
